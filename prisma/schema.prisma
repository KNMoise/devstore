datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")  
}

generator client {
  provider = "prisma-client-js"
}

// Define User model with relationships and timestamps
model User {
  id             Int             @id @default(autoincrement())
  email          String          @unique
  password       String
  name           String
  orders         Order[]
  passwordResets PasswordReset[] // Defines reverse relation with PasswordReset model

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

// Define PasswordReset model to handle password reset tokens with a user relationship
model PasswordReset {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
}

// Define Order model with user and order item relationships
model Order {
  id            Int            @id @default(autoincrement())
  userId        Int
  totalAmount   Float
  status        String          // 'pending', 'completed', 'failed', 'cancelled'
  paymentMethod String?         // 'mobileMoney', 'paypal', etc.
  paymentStatus String          @default("pending") // 'pending', 'paid', 'failed'
  paymentId     String?         // Store external payment transaction ID if needed
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  user          User            @relation(fields: [userId], references: [id])
  orderItems    OrderItem[]
}


// Define OrderItem model for items in an order, related to Product and Order
model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float    // Price of the product at the time of the order

  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Product {
  id          Int       @id @default(autoincrement()) // Primary key
  name        String    // Name of the product
  description String    // Description of the product
  price       Float     // Price of the product
  stock       Int       // Available stock of the product
  imageUrl    String?   // URL to the product image (optional)
  createdAt   DateTime  @default(now()) // Date when the product was created
  updatedAt   DateTime  @updatedAt       // Date when the product was last updated

  orderItems  OrderItem[] // A product can be part of many order items (one-to-many relationship)
}


